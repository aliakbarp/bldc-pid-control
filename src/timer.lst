   1               		.file	"timer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	timer0_init
  12               	timer0_init:
  13               	.LFB6:
  14               		.file 1 "src/timer.c"
   1:src/timer.c   **** /********************************
   2:src/timer.c   ****  * TIMER LIBRARY
   3:src/timer.c   ****  * Using for :
   4:src/timer.c   ****  * Generate pulse to BLDC (using TIMER1)
   5:src/timer.c   ****  * Counting BLDC rotation (using TIMER0)
   6:src/timer.c   ****  * Counting BLDC rotation time (using TIMER2)
   7:src/timer.c   ****  * Make delay function
   8:src/timer.c   ****  * 
   9:src/timer.c   ****  * Created by aliakbarp
  10:src/timer.c   **** ********************************/
  11:src/timer.c   **** 
  12:src/timer.c   **** #include <avr/io.h>
  13:src/timer.c   **** #include <util/delay.h>
  14:src/timer.c   **** 
  15:src/timer.c   **** void timer0_init(void){
  15               		.loc 1 15 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  16:src/timer.c   **** 	// T0, input for clock signal
  17:src/timer.c   **** 	DDRD&=~(1<<DDD4);
  21               		.loc 1 17 0
  22 0000 5498      		cbi 0xa,4
  18:src/timer.c   **** 	// T0, internal pull-up
  19:src/timer.c   **** 	PORTD|=(1<<PD4);
  23               		.loc 1 19 0
  24 0002 5C9A      		sbi 0xb,4
  20:src/timer.c   **** 	// Input clock from T0, rising edge
  21:src/timer.c   **** 	TCCR0B|=(1<<CS02)|(1<<CS01)|(1<<CS00);
  25               		.loc 1 21 0
  26 0004 85B5      		in r24,0x25
  27 0006 8760      		ori r24,lo8(7)
  28 0008 85BD      		out 0x25,r24
  22:src/timer.c   **** 	// Enable overflow interrupt
  23:src/timer.c   **** 	TIMSK0|=(1<<TOIE0);
  29               		.loc 1 23 0
  30 000a EEE6      		ldi r30,lo8(110)
  31 000c F0E0      		ldi r31,0
  32 000e 8081      		ld r24,Z
  33 0010 8160      		ori r24,lo8(1)
  34 0012 8083      		st Z,r24
  35 0014 0895      		ret
  36               		.cfi_endproc
  37               	.LFE6:
  39               	.global	timer1_init
  41               	timer1_init:
  42               	.LFB7:
  24:src/timer.c   **** }
  25:src/timer.c   **** 
  26:src/timer.c   **** void timer1_init(void){
  43               		.loc 1 26 0
  44               		.cfi_startproc
  45               	/* prologue: function */
  46               	/* frame size = 0 */
  47               	/* stack size = 0 */
  48               	.L__stack_usage = 0
  27:src/timer.c   **** 	// PINB2 as output, PWM generator pin
  28:src/timer.c   **** 	DDRB|=(1<<DDB2);
  49               		.loc 1 28 0
  50 0016 229A      		sbi 0x4,2
  29:src/timer.c   **** 	// OC1B activation for PWM output pin (COM)
  30:src/timer.c   **** 	// Fast PWM mode, with ICR1 as TOP (WGM)
  31:src/timer.c   **** 	TCCR1A|=(1<<COM1B1)|(1<<WGM11);
  51               		.loc 1 31 0
  52 0018 E0E8      		ldi r30,lo8(-128)
  53 001a F0E0      		ldi r31,0
  54 001c 8081      		ld r24,Z
  55 001e 8262      		ori r24,lo8(34)
  56 0020 8083      		st Z,r24
  32:src/timer.c   **** 	// Prescaller 8 (CS)
  33:src/timer.c   **** 	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11);
  57               		.loc 1 33 0
  58 0022 E1E8      		ldi r30,lo8(-127)
  59 0024 F0E0      		ldi r31,0
  60 0026 8081      		ld r24,Z
  61 0028 8A61      		ori r24,lo8(26)
  62 002a 8083      		st Z,r24
  34:src/timer.c   **** 	// TOP value of TIMER1 counting
  35:src/timer.c   **** 	ICR1 = 20000;
  63               		.loc 1 35 0
  64 002c 80E2      		ldi r24,lo8(32)
  65 002e 9EE4      		ldi r25,lo8(78)
  66 0030 9093 8700 		sts 134+1,r25
  67 0034 8093 8600 		sts 134,r24
  68 0038 0895      		ret
  69               		.cfi_endproc
  70               	.LFE7:
  72               	.global	timer2_init
  74               	timer2_init:
  75               	.LFB8:
  36:src/timer.c   **** }
  37:src/timer.c   **** 
  38:src/timer.c   **** void timer2_init(void){
  76               		.loc 1 38 0
  77               		.cfi_startproc
  78               	/* prologue: function */
  79               	/* frame size = 0 */
  80               	/* stack size = 0 */
  81               	.L__stack_usage = 0
  39:src/timer.c   **** 	// No prescalling
  40:src/timer.c   **** 	TCCR2B|=(1<<CS21);
  82               		.loc 1 40 0
  83 003a E1EB      		ldi r30,lo8(-79)
  84 003c F0E0      		ldi r31,0
  85 003e 8081      		ld r24,Z
  86 0040 8260      		ori r24,lo8(2)
  87 0042 8083      		st Z,r24
  41:src/timer.c   **** 	// Enable overflow interrupt 
  42:src/timer.c   **** 	TIMSK2|=(1<<TOIE2);
  88               		.loc 1 42 0
  89 0044 E0E7      		ldi r30,lo8(112)
  90 0046 F0E0      		ldi r31,0
  91 0048 8081      		ld r24,Z
  92 004a 8160      		ori r24,lo8(1)
  93 004c 8083      		st Z,r24
  94 004e 0895      		ret
  95               		.cfi_endproc
  96               	.LFE8:
  98               	.global	millisec
 100               	millisec:
 101               	.LFB9:
  43:src/timer.c   **** }
  44:src/timer.c   **** 
  45:src/timer.c   **** void millisec(int d){
 102               		.loc 1 45 0
 103               		.cfi_startproc
 104               	.LVL0:
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 0 */
 108               	.L__stack_usage = 0
  46:src/timer.c   **** 	int i = 0;
  47:src/timer.c   **** 	for(i=0; i<d; i++){
 109               		.loc 1 47 0
 110 0050 20E0      		ldi r18,0
 111 0052 30E0      		ldi r19,0
 112               	.LVL1:
 113               	.L5:
 114               		.loc 1 47 0 is_stmt 0 discriminator 1
 115 0054 2817      		cp r18,r24
 116 0056 3907      		cpc r19,r25
 117 0058 04F4      		brge .L8
 118               	.LVL2:
 119               	.LBB4:
 120               	.LBB5:
 121               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 122               		.loc 2 164 0 is_stmt 1
 123 005a EFE9      		ldi r30,lo8(3999)
 124 005c FFE0      		ldi r31,hi8(3999)
 125 005e 3197      		1: sbiw r30,1
 126 0060 01F4      		brne 1b
 127 0062 00C0      		rjmp .
 128 0064 0000      		nop
 129               	.LBE5:
 130               	.LBE4:
 131               		.loc 1 47 0
 132 0066 2F5F      		subi r18,-1
 133 0068 3F4F      		sbci r19,-1
 134               	.LVL3:
 135 006a 00C0      		rjmp .L5
 136               	.LVL4:
 137               	.L8:
 138               	/* epilogue start */
  48:src/timer.c   **** 		_delay_ms(1);
  49:src/timer.c   **** 	}
  50:src/timer.c   **** }
 139               		.loc 1 50 0
 140 006c 0895      		ret
 141               		.cfi_endproc
 142               	.LFE9:
 144               	.global	bldc_init
 146               	bldc_init:
 147               	.LFB10:
  51:src/timer.c   **** 
  52:src/timer.c   **** void bldc_init(void){
 148               		.loc 1 52 0
 149               		.cfi_startproc
 150 006e EF92      		push r14
 151               	.LCFI0:
 152               		.cfi_def_cfa_offset 3
 153               		.cfi_offset 14, -2
 154 0070 FF92      		push r15
 155               	.LCFI1:
 156               		.cfi_def_cfa_offset 4
 157               		.cfi_offset 15, -3
 158 0072 0F93      		push r16
 159               	.LCFI2:
 160               		.cfi_def_cfa_offset 5
 161               		.cfi_offset 16, -4
 162 0074 1F93      		push r17
 163               	.LCFI3:
 164               		.cfi_def_cfa_offset 6
 165               		.cfi_offset 17, -5
 166 0076 CF93      		push r28
 167               	.LCFI4:
 168               		.cfi_def_cfa_offset 7
 169               		.cfi_offset 28, -6
 170 0078 DF93      		push r29
 171               	.LCFI5:
 172               		.cfi_def_cfa_offset 8
 173               		.cfi_offset 29, -7
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 6 */
 177               	.L__stack_usage = 6
  53:src/timer.c   **** 	TCNT0 = 0;
 178               		.loc 1 53 0
 179 007a 16BC      		out 0x26,__zero_reg__
 180               	.LBB6:
  54:src/timer.c   **** 	while(TCNT0 <= 32){
  55:src/timer.c   **** 		OCR1B = 1000;
 181               		.loc 1 55 0
 182 007c 08EE      		ldi r16,lo8(-24)
 183 007e 13E0      		ldi r17,lo8(3)
  56:src/timer.c   **** 		millisec(1000);
  57:src/timer.c   **** 		uint16_t g;
  58:src/timer.c   **** 		for(g=1500; g<2200; g+=100){
  59:src/timer.c   **** 			OCR1B = g;
  60:src/timer.c   **** 			millisec(600);
  61:src/timer.c   **** 		}
  62:src/timer.c   **** 		for(g=2200; g>2080; g-=100){
  63:src/timer.c   **** 			OCR1B = g;
 184               		.loc 1 63 0
 185 0080 84E3      		ldi r24,lo8(52)
 186 0082 E82E      		mov r14,r24
 187 0084 88E0      		ldi r24,lo8(8)
 188 0086 F82E      		mov r15,r24
 189               	.L10:
 190               	.LBE6:
  54:src/timer.c   **** 	while(TCNT0 <= 32){
 191               		.loc 1 54 0 discriminator 1
 192 0088 86B5      		in r24,0x26
 193 008a 8132      		cpi r24,lo8(33)
 194 008c 00F4      		brsh .L14
 195               	.LBB7:
  55:src/timer.c   **** 		OCR1B = 1000;
 196               		.loc 1 55 0
 197 008e 1093 8B00 		sts 138+1,r17
 198 0092 0093 8A00 		sts 138,r16
  56:src/timer.c   **** 		millisec(1000);
 199               		.loc 1 56 0
 200 0096 88EE      		ldi r24,lo8(-24)
 201 0098 93E0      		ldi r25,lo8(3)
 202 009a 0E94 0000 		call millisec
 203               	.LVL5:
  58:src/timer.c   **** 		for(g=1500; g<2200; g+=100){
 204               		.loc 1 58 0
 205 009e CCED      		ldi r28,lo8(-36)
 206 00a0 D5E0      		ldi r29,lo8(5)
 207               	.LVL6:
 208               	.L12:
  59:src/timer.c   **** 			OCR1B = g;
 209               		.loc 1 59 0 discriminator 2
 210 00a2 D093 8B00 		sts 138+1,r29
 211 00a6 C093 8A00 		sts 138,r28
  60:src/timer.c   **** 			millisec(600);
 212               		.loc 1 60 0 discriminator 2
 213 00aa 88E5      		ldi r24,lo8(88)
 214 00ac 92E0      		ldi r25,lo8(2)
 215 00ae 0E94 0000 		call millisec
 216               	.LVL7:
  58:src/timer.c   **** 		for(g=1500; g<2200; g+=100){
 217               		.loc 1 58 0 discriminator 2
 218 00b2 CC59      		subi r28,-100
 219 00b4 DF4F      		sbci r29,-1
 220               	.LVL8:
 221 00b6 C839      		cpi r28,-104
 222 00b8 88E0      		ldi r24,8
 223 00ba D807      		cpc r29,r24
 224 00bc 01F4      		brne .L12
 225               	.LVL9:
 226               		.loc 1 63 0
 227 00be D093 8B00 		sts 138+1,r29
 228 00c2 C093 8A00 		sts 138,r28
  64:src/timer.c   **** 			millisec(600);
 229               		.loc 1 64 0
 230 00c6 88E5      		ldi r24,lo8(88)
 231 00c8 92E0      		ldi r25,lo8(2)
 232 00ca 0E94 0000 		call millisec
 233               	.LVL10:
  63:src/timer.c   **** 			OCR1B = g;
 234               		.loc 1 63 0
 235 00ce F092 8B00 		sts 138+1,r15
 236 00d2 E092 8A00 		sts 138,r14
 237               		.loc 1 64 0
 238 00d6 88E5      		ldi r24,lo8(88)
 239 00d8 92E0      		ldi r25,lo8(2)
 240 00da 0E94 0000 		call millisec
 241               	.LVL11:
 242 00de 00C0      		rjmp .L10
 243               	.LVL12:
 244               	.L14:
 245               	/* epilogue start */
 246               	.LBE7:
  65:src/timer.c   **** 		}
  66:src/timer.c   **** 	}
  67:src/timer.c   **** }
 247               		.loc 1 67 0
 248 00e0 DF91      		pop r29
 249 00e2 CF91      		pop r28
 250 00e4 1F91      		pop r17
 251 00e6 0F91      		pop r16
 252 00e8 FF90      		pop r15
 253 00ea EF90      		pop r14
 254 00ec 0895      		ret
 255               		.cfi_endproc
 256               	.LFE10:
 258               	.global	timer_init
 260               	timer_init:
 261               	.LFB11:
  68:src/timer.c   **** 
  69:src/timer.c   **** void timer_init(void){
 262               		.loc 1 69 0
 263               		.cfi_startproc
 264               	/* prologue: function */
 265               	/* frame size = 0 */
 266               	/* stack size = 0 */
 267               	.L__stack_usage = 0
  70:src/timer.c   **** 	timer0_init();
 268               		.loc 1 70 0
 269 00ee 0E94 0000 		call timer0_init
 270               	.LVL13:
  71:src/timer.c   **** 	timer1_init();
 271               		.loc 1 71 0
 272 00f2 0E94 0000 		call timer1_init
 273               	.LVL14:
  72:src/timer.c   **** 	timer2_init();
 274               		.loc 1 72 0
 275 00f6 0C94 0000 		jmp timer2_init
 276               	.LVL15:
 277               		.cfi_endproc
 278               	.LFE11:
 280               	.Letext0:
 281               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 timer.c
     /tmp/ccRibbg9.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccRibbg9.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccRibbg9.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccRibbg9.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccRibbg9.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccRibbg9.s:12     .text:0000000000000000 timer0_init
     /tmp/ccRibbg9.s:41     .text:0000000000000016 timer1_init
     /tmp/ccRibbg9.s:74     .text:000000000000003a timer2_init
     /tmp/ccRibbg9.s:100    .text:0000000000000050 millisec
     /tmp/ccRibbg9.s:146    .text:000000000000006e bldc_init
     /tmp/ccRibbg9.s:260    .text:00000000000000ee timer_init

NO UNDEFINED SYMBOLS
